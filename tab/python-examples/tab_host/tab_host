#!/usr/bin/env python3
# tx_example.py
#
# Usage: python3 tx_example.py /path/to/dev
# Parameters:
#  /path/to/dev: path to device, e.g. /dev/ttyUSB0
# Output:
#  Prints results to the command line
#
# Written by Bradley Denby
# Other contributors: Chad Taylor
#
# See the top-level LICENSE file for the license.

# import Python modules
import os     # path
import serial # serial
import sys    # accessing script arguments
import time   # sleep
import datetime # time
import math   # math
from cmd import Cmd    # command line
import glob   # file path autocompletion
import readline # file path autocompletion
import colorama # color
import signal # signal handling

# Make Python TAB implementation visible
sys.path.append(os.path.abspath('../../python-implementation/'))

# import TAB support
from tab import *

################################################################################

# initialize script arguments
dev = '' # serial device

# parse script arguments
if len(sys.argv)==2:
  dev = sys.argv[1]
else:
  print(\
   'Usage: '\
   './tab_host '\
   '/path/to/dev'\
  )
  exit()

readline.set_completer_delims(' \t\n')

# Set up test support variables
HWID = 0x0012

################################################################################


class tabCommands(Cmd):

  def __init__(self):
    super().__init__()
    colorama.init()
    # Create serial object
    try:
      self.serial_port = serial.Serial(port=dev,baudrate=921600)
    except:
      print('Serial port object creation failed:')
      print('  '+dev)
      exit()


    # Set up test support variables
    self.msgid = 0x0000

    self.prompt = colorama.Fore.LIGHTRED_EX + 'TAB' + colorama.Fore.RESET + '> '

    self.bootloader_power_options = ['run', 'sleep', 'low-power-run', 'low-power-sleep', \
                                     'stop0', 'stop1', 'stop2', 'standby', 'shutdown']
    
  def handler(self, signum, frame):
    if signum == 2:
      print('^C')
      exit(1)
  


  def do_common_ack(self, line):
    """    This acknowledgement command is most often used as a reply indicating success. It is also useful as a command to check whether the recipient is "alive."
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(COMMON_ACK_OPCODE, HWID, self.msgid, GND, CDH)
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    self.msgid += 1


  def do_common_nack(self, line):
    """    This negative-acknowledgement command is used as a reply indicating failure.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(COMMON_NACK_OPCODE, HWID, self.msgid, GND, CDH)
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_common_debug(self, line):
    """    This command supports a variable-length ASCII payload useful for debugging.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    rx_cmd_buff = RxCmdBuff()
    cmd = TxCmd(COMMON_DEBUG_OPCODE, HWID, self.msgid, GND, CDH)
    cmd.common_debug('Hello, world!')
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_common_data(self, line):
    """    This command supports a variable-length byte payload useful for data transfer.
    """
    self.running = True
    

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(COMMON_DATA_OPCODE, HWID, self.msgid, GND, CDH)
    cmd.common_data([0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b])
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_common_write_ext(self, line):
    """    This command writes specified bytes to the specified address of the board's external flash
    USAGE:    common_write_ext <address> <data> [-v]
    EXAMPLE:  common_write_ext 0x00001000 0x01 0x02 0x03 0x04 hello 33
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(COMMON_WRITE_EXT_OPCODE, HWID, self.msgid, GND, CDH)
    data = []

    try:
      address = int(opts[1],16)
    except:
      print('ERROR: "' + opts[1] + '" is an invalid address')
      return
    
    for x in opts[1:]:
      try:
        try:
            try:
                x = int(x)
                z = x.to_bytes((x.bit_length()+7)//8,byteorder='big')
                for y in z:
                    data.append(y)
            except:
                data.append(int(x,16))
        except:
            for y in x:
                    data.append(int(hex(ord(y))[2:],16))
      except:
        print('ERROR: "' + x + '" is an invalid data value')
        return
    cmd.common_write_ext(address, data)
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)

    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_common_erase_sector_ext(self, line):
    """    This command erases a specified sector of the board's external flash
    USAGE:    common_erase_sector_ext <sector_start_address> [-v]
    EXAMPLE:  common_erase_sector_ext 0x00001000
    """
    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break

    cmd = TxCmd(COMMON_ERASE_SECTOR_EXT_OPCODE, HWID, self.msgid, GND, CDH)
    cmd.common_erase_sector_ext(int(opts[0],16))
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)

    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1
    

  def do_common_read_ext(self, line):
    """    This command reads a specified number of bytes from the specified address of the board's external flash
    USAGE:    common_read_ext <address> <length> [-v]
    EXAMPLE:  common_read_ext 0x00001000 128
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(COMMON_READ_EXT_OPCODE, HWID, self.msgid, GND, CDH)
    cmd.common_read_ext(int(opts[0],16), int(opts[1]))
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_bootloader_ack(self, line):
    """    The bootloader acknowledgement command is exclusively used as a bootloader reply indicating success.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(BOOTLOADER_ACK_OPCODE, HWID, self.msgid, GND, CDH)
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)

    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_bootloader_nack(self, line):
    """    The bootloader negative-acknowledgement command is used as a bootloader reply indicating failure.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(BOOTLOADER_NACK_OPCODE, HWID, self.msgid, GND, CDH)
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)

    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')
      
    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_bootloader_ping(self, line):
    """    The bootloader ping command checks whether the bootloader is active.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(BOOTLOADER_PING_OPCODE, HWID, self.msgid, GND, CDH)
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)

    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_bootloader_erase(self, line):
    """    This command instructs the bootloader to erase all applications.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(BOOTLOADER_ERASE_OPCODE, HWID, self.msgid, GND, CDH)
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)

    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')
      
    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_bootloader_write_page(self, line):
    """    The bootloader write page command instructs the bootloader to write 128 bytes to a 128-byte 
    region of (presumably nonvolatile) memory indexed by the "page number" parameter (the "sub-page ID"). For 
    backwards-compatibility, the 128 bytes of "sub-page" data are optional (presumably, this feature allows 
    for "dry-runs" or page number validity probes). The "page number" parameter ("sub-page ID") is required.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(BOOTLOADER_WRITE_PAGE_OPCODE, HWID, self.msgid, GND, CDH)
    cmd.bootloader_write_page(page_number=0, page_data=128*[0])
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)

    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_bootloader_write_page_addr32(self, line):
    """    This command instructs the bootloader to write 128 bytes to a region of (presumably nonvolatile) 
    memory starting at the provided 32-bit address. The target start address is required, and the 128 bytes 
    of data are optional. This feature allows for "dry-runs" or target start address validity probes.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(BOOTLOADER_WRITE_PAGE_ADDR32_OPCODE, HWID, self.msgid, GND, CDH)
    cmd.bootloader_write_page_addr32(addr=0x08008000, page_data=128*[0])
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_bootloader_jump(self, line):
    """    The bootloader jump command instructs the bootloader to start a user application.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(BOOTLOADER_JUMP_OPCODE, HWID, self.msgid, GND, CDH)
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_bootloader_power(self, line):
    """    This command instructs the bootloader to change the power mode it is operating in.
    USAGE:    bootloader_power <mode> [-v]
    EXAMPLE:  bootloader_power sleep
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(BOOTLOADER_POWER_OPCODE, HWID, self.msgid, GND, CDH)
    cmd.bootloader_power_select(opts[0])
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1

  def complete_bootloader_power(self, text, line, start_index, end_index):
    if text:
        return [option for option in self.bootloader_power_options if option.startswith(text)]
    else:
        return self.bootloader_power_options


  def do_app_get_telem(self, line):
    """
    
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(COMMON_ASCII_OPCODE, HWID, self.msgid, GND, CDH)
    tle  = 'TLE'
    tle += 'FLOCK 3K-5              '
    tle += '1 43899U 18111Z   21284.66246111  .00014637  00000-0  51582-3 0  9994'
    tle += '2 43899  97.2179 176.7560 0018058 232.7758 127.1835 15.29226533155475'
    cmd.common_ascii(tle)
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_app_get_time(self, line):
    """    This command returns the current time of the RTC in seconds since the J2000 epoch.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    cmd = TxCmd(APP_GET_TIME_OPCODE, HWID, self.msgid, GND, CDH)
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_app_set_time(self, line):
    """    This command sets the current time of the RTC in seconds since the J2000 epoch.
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break

    cmd = TxCmd(APP_SET_TIME_OPCODE, HWID, self.msgid, GND, CDH)
    td = datetime.datetime.now(tz=datetime.timezone.utc) - J2000
    cmd.app_set_time(sec=math.floor(td.total_seconds()), ns=(td.microseconds*1000))
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
    
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')

    cmd.clear()
    rx_cmd_buff.clear()
    self.msgid += 1


  def do_app_reboot(self, line):
    """    This command is not implemented
    """

    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break




################################################################################
# Custom commands

  def do_write_file(self, line):
    """    This function writes a file to the specified address of the board's external flash
    USAGE: write_file <filename> <address> [-v]
    """
    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
      
    try:
      address = int(opts[1],16)
    except:
      print('ERROR: "' + opts[1] + '" is an invalid address')
      return
    
    filename = opts[0]
    try:
      file = open(filename, 'rb')
    except:
      print('ERROR: "' + filename + '" is an invalid file')
      return
    
    filesize = os.path.getsize(filename)

    file_data = list(file.read())
    file.close()
    filesize_data = list(filesize.to_bytes(4,byteorder='big'))
    write_data = filesize_data + file_data
    writelength = 128

    while writelength == 128:
      if len(write_data) > 128:
        writelength = 128
      else:
        writelength = len(write_data)



      cmd = TxCmd(COMMON_WRITE_EXT_OPCODE, HWID, self.msgid, GND, CDH)
      cmd.common_write_ext(address, write_data[:writelength])
      if writelength == 128:
        write_data = write_data[writelength:]
      address += writelength
      byte_i = 0
      while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
        if byte_i < cmd.get_byte_count():
          self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
          byte_i += 1
        if self.serial_port.in_waiting>0:
          bytes = self.serial_port.read(1)
          for b in bytes:
            rx_cmd_buff.append_byte(b)
      if verbose == True:
        print(len(write_data))
        print('txcmd: '+str(cmd))
        print('reply: '+str(rx_cmd_buff)+'\n')
      cmd.clear()
      rx_cmd_buff.clear()
      self.msgid += 1

  def complete_write_file(self, text, line, start_index, end_index):
    opts = line.split(' ')[1:]
    if text and len(opts) == 1: # if I already started typing the option, filter the existing options
        path = text
        if os.path.isdir(path):
          return glob.glob(os.path.join(path, '*'))
        else:
          return glob.glob(path+'*')
    else:
        return self.write_file_options
    

  def do_erase_sectors(self, line):
    """    This function erases a specified number of sectors starting at the specified address
    USAGE: erase_sectors <address> <sectors> [-v]
    """

    opts = line.split(' ')
    
    try:
      address = int(opts[0],16)
    except:
      print('ERROR: "' + opts[0] + '" is an invalid address')
      return
    try:
      sectors = int(opts[1])
    except:
      print('ERROR: "' + opts[1] + '" is an invalid number of sectors')
      return

    for i in range(0, sectors):
      self.do_common_erase_sector_ext(str(hex(address)) + " " + " ".join(opts[1:]))
      address += 0x1000
      time.sleep(0.1)
    

  def do_read_file(self, line):
    """    This function reads a file from the specified address of the board's external flash
    USAGE: read_file <address> <filename> [-v]
    """
    rx_cmd_buff = RxCmdBuff()
    opts = line.split(' ')

    verbose = True
    for x in opts:
      if x == '-v':
        verbose = False
        break
    try:
      address = int(opts[0],16)
    except:
      print('ERROR: "' + opts[0] + '" is an invalid address')
      return
    
    filename = opts[1]
    file = open(filename, 'wb')

    cmd = TxCmd(COMMON_READ_EXT_OPCODE, HWID, self.msgid, GND, CDH)
    cmd.common_read_ext(address, 4)
    address += 0x04
    byte_i = 0
    while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
      if byte_i < cmd.get_byte_count():
        self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
        byte_i += 1
      if self.serial_port.in_waiting>0:
        bytes = self.serial_port.read(1)
        for b in bytes:
          rx_cmd_buff.append_byte(b)
      filesize = int.from_bytes(rx_cmd_buff.data[PLD_START_INDEX:PLD_START_INDEX+4], byteorder='big')
    if verbose == True:
      print('txcmd: '+str(cmd))
      print('reply: '+str(rx_cmd_buff)+'\n')
    rx_cmd_buff.clear()
    self.msgid += 1

    
    file_data = filesize
    file_data = []
    readLength = 128

    while readLength == 128:
      if filesize - len(file_data) > 128:
        readLength = 128
      else:
        readLength = filesize - len(file_data)

      cmd = TxCmd(COMMON_READ_EXT_OPCODE, HWID, self.msgid, GND, CDH)
      cmd.common_read_ext(address, readLength)
      address += 0x80
      byte_i = 0
      while rx_cmd_buff.state != RxCmdBuffState.COMPLETE:
        if byte_i < cmd.get_byte_count():
          self.serial_port.write(cmd.data[byte_i].to_bytes(1, byteorder='big'))
          byte_i += 1
        if self.serial_port.in_waiting>0:
          bytes = self.serial_port.read(1)
          for b in bytes:
            rx_cmd_buff.append_byte(b)
      for i in range(0,rx_cmd_buff.data[MSG_LEN_INDEX]-0x06):
        file_data.append(rx_cmd_buff.data[PLD_START_INDEX+i])
      if verbose == True:
        print(filesize - len(file_data))
        print('txcmd: '+str(cmd))
        print('reply: '+str(rx_cmd_buff)+'\n')
        cmd.clear()
      rx_cmd_buff.clear()
      self.msgid += 1

    file.write(bytearray(file_data))
    file.close()

  def do_test_files(self, line):
    """    This function tests the write and read file functions
    """
    for i in range(0,10):
      print(i+1)
      self.do_erase_sectors('0x00001000 1150 -v')
      time.sleep(10)
      self.do_write_file('video.mp4 0x00001000 -v')
      input = '0x00001000 readFiles/video'+str(i)+' -v'
      self.do_read_file(input)



my_cmd = tabCommands()
signal.signal(signal.SIGINT, my_cmd.handler)

my_cmd.cmdloop()

